package util

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"stressTest/client"
	"stressTest/config"
	"stressTest/defs"
	"strings"

	v1 "k8s.io/api/core/v1"
)

func GetResList(res string) []string {
	client := client.GetClientWithoutReuse(false)
	_, _, request := GetBasic(res, config.GetDefultNameSpace())
	req, err := http.NewRequest("GET", request+"?labelSelector="+config.GetDefaultLabelSelector(), nil)
	if err != nil {
		log.Fatal("new http request err", err)
	}
	req.Header.Set("Authorization", config.GetDefultAuthor())
	req.Header.Set("Content-Type", "application/json")
	resp, err := client.Do(req)
	if err != nil {
		log.Panicln("do request has err", err)
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("read response has err", err)
	}
	// log.Println("body", string(body))
	nslist := v1.NamespaceList{}
	err = json.Unmarshal(body, &nslist)
	if err != nil {
		log.Println("unmarshal err", err)
	}
	resu := []string{}
	for _, item := range nslist.Items {
		resu = append(resu, item.Name)
	}
	return resu
}
func GetBasic(res, namespace string) (string, string, string) {
	kind := Res2kind(res)
	if kind == "" {
		log.Println("invalid resource type")
	}
	uri := Res2uri(res)
	request := ""
	namespaced, api_version := Kind2ns_and_version(kind)
	if api_version == "v1" {
		if namespaced {
			request = defs.Endpoint + "api/" + api_version + "/namespaces/" + namespace + "/" + uri
		} else {
			request = defs.Endpoint + "api/" + api_version + "/" + uri
		}
	} else {
		request = defs.Endpoint + "apis/" + api_version + "/namespaces/" + namespace + "/" + uri
	}
	return kind, api_version, request
}
func GetPostDataAndUrl(res, namespace string, antNum, num, id int) (data []byte, request string) {
	kind, api_version, request := GetBasic(res, namespace)
	// fmt.Println(kind, api_version, request)
	body := bytes.Buffer{}
	annotation := GetAnnotations(antNum)
	if kind == "Namespace" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}}`)
	} else if kind == "Node" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"unschedulable": true}}`)
	} else if kind == "PersistentVolume" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"accessModes": ["ReadWriteOnce"], "capacity": {"storage": "100Ki"}, "hostPath": {"path": "/root/data"}}}`)
	} else if kind == "ConfigMap" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "data": {"test-data":""}}`)
	} else if kind == "Endpoints" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}}`)
	} else if kind == "LimitRange" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"limits": [{"type":"Container"}]}}`)
	} else if kind == "PersistentVolumeClaim" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"accessModes": ["ReadWriteOnce"], "resources": {"requests": {"storage": "200Ki"}}}}`)
	} else if kind == "Pod" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"containers": [{"name": "test", "image": "nginx:1.17"}]}}`)
	} else if kind == "PodTemplate" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "template": {"metadata": {"name": "pod-template"}, "spec": {"containers": [{"name": "test", "image": "nginx:1.17"}]}}}`)
	} else if kind == "ReplicationController" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"replicas": 0, "selector": {"app": "test"}, "template": {"metadata": {"name": "test", "labels": {"app": "test"}}, "spec": {"containers": [{"name": "test", "image": "nginx:1.17"}]}}}}`)
	} else if kind == "ResourceQuota" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}}`)
	} else if kind == "Secret" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "data": {"test-secret":""}, "type": "Opaque"}`)
	} else if kind == "ServiceAccount" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}}`)
	} else if kind == "Service" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`},"spec": {"ports": [{"port": 80}]}}`)
	} else if kind == "ControllerRevision" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "revision": 0, "data": ""}`)
	} else if kind == "DaemonSet" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"selector": {"matchLabels": {"app": "test"}}, "template": {"metadata": {"name": "test", "labels": {"app": "test"}}, "spec": {"containers": [{"name": "test", "image": "nginx:1.17"}]}}}}`)
	} else if kind == "Deployment" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"replicas": 0, "selector": {"matchLabels": {"app": "test"}}, "template":{"metadata": {"name": "test", "labels": {"app": "test"}}, "spec": {"containers": [{"name": "test","image": "nginx:1.17"}]}}}}`)
	} else if kind == "ReplicaSet" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"replicas": 0, "selector": {"matchLabels": {"app": "test"}}, "template":{"metadata": {"name": "test", "labels": {"app": "test"}}, "spec": {"containers": [{"name": "test","image": "nginx:1.17"}]}}}}`)
	} else if kind == "StatefulSet" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"replicas": 0, "selector": {"matchLabels": {"app": "test"}}, "serviceName": "", "template": {"metadata": {"name": "test", "labels": {"app": "test"}}, "spec": {"containers": [{"name": "test", "image": "nginx:1.17"}]}}}}`)
	} else if kind == "CronJob" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"schedule": "0 */1 * * *", "suspend": true, "jobTemplate": {"spec": {"template": {"spec": {"restartPolicy": "Never", "containers": [{"name": "test", "image": "busybox:1.30", "command": ["bin/sh", "-c", "sleep 10"]}]}}}}}}`)
	} else if kind == "Job" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "test-`)
		body.WriteString(strings.ToLower(kind))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(num))
		body.WriteString(`-`)
		body.WriteString(strconv.Itoa(id))
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"template": {"spec": {"restartPolicy": "Never", "containers": [{"name": "test", "image": "busybox:1.30", "command": ["bin/sh", "-c", "sleep 10"]}]}}}}`)
	}
	return body.Bytes(), request
}
func GetAnnotations(num int) string {
	res := bytes.Buffer{}
	res.WriteString(`, "annotations": {`)
	for i := 0; i < num; i++ {
		if i < 10 {
			res.WriteString(`"key-00`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`": "value-00`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`"`)
		} else if i < 100 {
			res.WriteString(`"key-0`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`": "value-0`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`"`)
		} else {
			res.WriteString(`"key-`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`": "value-`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`"`)
		}
		if i != num-1 {
			res.WriteString(", ")
		}
	}
	res.WriteString("}")
	return res.String()
}
func GetPatchAnnotations(num int) string {
	res := bytes.Buffer{}
	res.WriteString(`{"metadata": {"annotations": {`)
	for i := 0; i < num; i++ {
		if i < 10 {
			res.WriteString(`"key-00`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`": "value-00`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`"`)
		} else if i < 100 {
			res.WriteString(`"key-0`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`": "value-0`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`"`)
		} else {
			res.WriteString(`"key-`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`": "value-`)
			res.WriteString(strconv.Itoa(i))
			res.WriteString(`"`)
		}
		if i != num-1 {
			res.WriteString(", ")
		}
	}
	res.WriteString("}}}")
	return res.String()
}

func GetPutDataAndUrl(res, namespace, resName string, antNum int) (data []byte, request string) {
	kind, api_version, request := GetBasic(res, namespace)
	// fmt.Println(kind, api_version, request)
	body := bytes.Buffer{}
	annotation := GetAnnotations(antNum)
	if kind == "Namespace" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}}`)
	} else if kind == "Node" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"unschedulable": true}}`)
	} else if kind == "PersistentVolume" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"accessModes": ["ReadWriteOnce"], "capacity": {"storage": "100Ki"}, "hostPath": {"path": "/root/data"}}}`)
	} else if kind == "ConfigMap" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "data": {"test-data":""}}`)
	} else if kind == "Endpoints" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}}`)
	} else if kind == "LimitRange" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"limits": [{"type":"Container"}]}}`)
	} else if kind == "PersistentVolumeClaim" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"accessModes": ["ReadWriteOnce"], "resources": {"requests": {"storage": "200Ki"}}}}`)
	} else if kind == "Pod" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"containers": [{"name": "test", "image": "nginx:1.17"}]}}`)
	} else if kind == "PodTemplate" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "template": {"metadata": {"name": "pod-template"}, "spec": {"containers": [{"name": "test", "image": "nginx:1.17"}]}}}`)
	} else if kind == "ReplicationController" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"replicas": 0, "selector": {"app": "test"}, "template": {"metadata": {"name": "test", "labels": {"app": "test"}}, "spec": {"containers": [{"name": "test", "image": "nginx:1.17"}]}}}}`)
	} else if kind == "ResourceQuota" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}}`)
	} else if kind == "Secret" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "data": {"test-secret":""}, "type": "Opaque"}`)
	} else if kind == "ServiceAccount" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}}`)
	} else if kind == "Service" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`},"spec": {"ports": [{"port": 80}]}}`)
	} else if kind == "ControllerRevision" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "revision": 0, "data": ""}`)
	} else if kind == "DaemonSet" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"selector": {"matchLabels": {"app": "test"}}, "template": {"metadata": {"name": "test", "labels": {"app": "test"}}, "spec": {"containers": [{"name": "test", "image": "nginx:1.17"}]}}}}`)
	} else if kind == "Deployment" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"replicas": 0, "selector": {"matchLabels": {"app": "test"}}, "template":{"metadata": {"name": "test", "labels": {"app": "test"}}, "spec": {"containers": [{"name": "test","image": "nginx:1.17"}]}}}}`)
	} else if kind == "ReplicaSet" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"replicas": 0, "selector": {"matchLabels": {"app": "test"}}, "template":{"metadata": {"name": "test", "labels": {"app": "test"}}, "spec": {"containers": [{"name": "test","image": "nginx:1.17"}]}}}}`)
	} else if kind == "StatefulSet" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"replicas": 0, "selector": {"matchLabels": {"app": "test"}}, "serviceName": "", "template": {"metadata": {"name": "test", "labels": {"app": "test"}}, "spec": {"containers": [{"name": "test", "image": "nginx:1.17"}]}}}}`)
	} else if kind == "CronJob" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)
		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"schedule": "0 */1 * * *", "suspend": true, "jobTemplate": {"spec": {"template": {"spec": {"restartPolicy": "Never", "containers": [{"name": "test", "image": "busybox:1.30", "command": ["bin/sh", "-c", "sleep 10"]}]}}}}}}`)
	} else if kind == "Job" {
		body.WriteString(`{"apiVersion": "`)
		body.WriteString(api_version)

		body.WriteString(`", "kind": "`)
		body.WriteString(kind)
		body.WriteString(`", "metadata": {"name": "`)
		body.WriteString(resName)
		body.WriteString(`", "namespace": "`)
		body.WriteString(namespace)
		body.WriteString(`", "labels": {"env":"test"}`)
		body.WriteString(annotation)
		body.WriteString(`}, "spec": {"template": {"spec": {"restartPolicy": "Never", "containers": [{"name": "test", "image": "busybox:1.30", "command": ["bin/sh", "-c", "sleep 10"]}]}}}}`)
	}
	return body.Bytes(), request
}
